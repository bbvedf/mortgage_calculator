import streamlit as st
import pandas as pd
import numpy as np
import numpy_financial as npf
import matplotlib.pyplot as plt
from io import BytesIO

# Configuraci√≥n
st.set_page_config(layout="wide")
st.title("üìä Calculadora Hipotecaria Avanzada")

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Par√°metros")
    loan_amount = st.number_input("Monto del pr√©stamo (‚Ç¨)", min_value=0.0, value=200000.0, step=10000.0)
    interest_rate = st.number_input("Tasa de inter√©s anual (%)", min_value=0.0, value=3.5, step=0.1)
    loan_term = st.number_input("Plazo del pr√©stamo (a√±os)", min_value=1, value=30)
    extra_payment = st.number_input("Pago extra mensual (‚Ç¨)", min_value=0.0, value=0.0)

# Funci√≥n con debug
def calculate_amortization(loan_amount, annual_rate, years, extra=0):
    monthly_rate = annual_rate / 100 / 12
    periods = years * 12
    payment = npf.pmt(monthly_rate, periods, -loan_amount)
    
    schedule = []
    balance = loan_amount
    
    for month in range(1, periods + 1):
        interest = balance * monthly_rate
        principal = (payment - interest) + extra
        balance -= principal
        
        if balance <= 0:
            actual_payment = principal + balance
            balance = 0
            schedule.append([month, actual_payment, interest, principal - (actual_payment - (payment - interest)), balance])
            break
            
        schedule.append([month, payment + extra, interest, principal, balance])
    
    df = pd.DataFrame(schedule, columns=["Mes", "Pago Total", "Intereses", "Capital", "Deuda Restante"])
    
    # Debug: Verificar datos generados
    st.sidebar.write("üîç Primeras filas de datos:", df.head(3))
    st.sidebar.write("üìä Total de registros:", len(df))
    
    return df

if st.button("üîÑ Calcular"):
    df = calculate_amortization(loan_amount, interest_rate, loan_term, extra_payment)
    
    # Debug: Verificar c√°lculo b√°sico
    st.sidebar.write("üí∞ Cuota calculada:", df.iloc[0,1])
    st.sidebar.write("üßÆ Meses calculados:", len(df))
    
    # Crear pesta√±as
    tab1, tab2 = st.tabs(["üìà Gr√°ficos", "üìã Tabla"])
    
    with tab1:

        # --- RESUMEN COMPLETO EN 3 COLUMNAS ---
        st.divider()

        cols = st.columns(3)

        # Columna 1: CUOTA
        with cols[0]:
            total_payments = df['Pago Total'].sum()
            st.metric(
                label="üìå Cuota mensual",
                value=f"‚Ç¨{df.iloc[0,1]:.2f}",
                delta=f"Anual: ‚Ç¨{df.iloc[0,1]*12:,.2f} | Global: ‚Ç¨{total_payments:,.2f}",
                delta_color="off",
                help=f"""
                ‚Ä¢ **Mensual**: Pago fijo cada mes\n
                ‚Ä¢ **Anual**: {df.iloc[0,1]*12:,.2f}‚Ç¨ (12 cuotas)\n
                ‚Ä¢ **Global**: {total_payments:,.2f}‚Ç¨ (total {len(df)} pagos)\n
                ‚Ä¢ **Capital/Inter√©s**: {df.iloc[0,3]:.2f}‚Ç¨ / {df.iloc[0,2]:.2f}‚Ç¨
                """
            )

        # Columna 2: INTERESES
        with cols[1]:
            total_interest = df['Intereses'].sum()
            avg_interest = total_interest / len(df)
            st.metric(
                label="üí∏ Intereses",
                value=f"‚Ç¨{avg_interest:.2f}",
                delta=f"Anual: ‚Ç¨{avg_interest*12:,.2f} | Global: ‚Ç¨{total_interest:,.2f}",
                delta_color="off",
                help=f"""
                ‚Ä¢ **Mensual (avg)**: {avg_interest:.2f}‚Ç¨\n
                ‚Ä¢ **Anual (avg)**: {avg_interest*12:,.2f}‚Ç¨\n
                ‚Ä¢ **Global**: {total_interest:,.2f}‚Ç¨ ({total_interest/loan_amount*100:.1f}% del pr√©stamo)\n
                ‚Ä¢ **Primer mes**: {df.iloc[0,2]:.2f}‚Ç¨\n
                ‚Ä¢ **√öltimo mes**: {df.iloc[-1,2]:.2f}‚Ç¨
                """
            )

        # Columna 3: CAPITAL
        with cols[2]:
            total_capital = df['Capital'].sum()
            avg_capital = total_capital / len(df)
            st.metric(
                label="üè† Capital",
                value=f"‚Ç¨{avg_capital:.2f}",
                delta=f"Anual: ‚Ç¨{avg_capital*12:,.2f} | Global: ‚Ç¨{total_capital:,.2f}",
                delta_color="off",
                help=f"""
                ‚Ä¢ **Mensual (avg)**: {avg_capital:.2f}‚Ç¨\n
                ‚Ä¢ **Anual (avg)**: {avg_capital*12:,.2f}‚Ç¨\n
                ‚Ä¢ **Global**: {total_capital:,.2f}‚Ç¨ (100% del pr√©stamo)\n
                ‚Ä¢ **Primer mes**: {df.iloc[0,3]:.2f}‚Ç¨\n
                ‚Ä¢ **√öltimo mes**: {df.iloc[-1,3]:.2f}‚Ç¨
                """
            )


        view_option = st.radio("Visualizaci√≥n:", ["Por Meses"], horizontal=True)
        
        # Debug: Mostrar opci√≥n seleccionada
        st.sidebar.write("üéöÔ∏è Vista seleccionada:", view_option)
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # Gr√°fico 1 - Evoluci√≥n deuda
        deudaRestante = "Deuda Restante"
        if view_option == "Por A√±os":
            try:
                df['A√±o'] = (df['Mes'] - 1) // 12 + 1
                plot_df = df.groupby('A√±o').last().reset_index()
                
                # Debug: Verificar agrupaci√≥n anual
                st.sidebar.write("üìÖ Datos anuales (√∫ltimo mes):", plot_df[['A√±o', deudaRestante]].head())
                
                ax1.plot(plot_df['A√±o'], plot_df[deudaRestante], color='#FF6B6B')
                ax1.set_xlabel("A√±os")
            except Exception as e:
                st.sidebar.error(f"‚ùå Error en gr√°fico anual: {str(e)}")
        else:
            ax1.plot(df['Mes'], df[deudaRestante], color='#FF6B6B')
            ax1.set_xlabel("Meses")
        
        ax1.set_title("Evoluci√≥n de la Deuda")
        ax1.grid(True)
        
        # Gr√°fico 2 - Composici√≥n pagos
        if view_option == "Por A√±os":
            try:
                yearly_sum = df.groupby('A√±o')[['Capital', 'Intereses']].sum().reset_index()
                
                # Debug: Verificar suma anual
                st.sidebar.write("üßæ Suma anual:", yearly_sum.head())
                
                ax2.bar(yearly_sum['A√±o'], yearly_sum['Capital'], label="Capital", color='#4ECDC4')
                ax2.bar(yearly_sum['A√±o'], yearly_sum['Intereses'], bottom=yearly_sum['Capital'], 
                       label="Intereses", color='#FFE66D')
                ax2.set_xlabel("A√±os")
            except Exception as e:
                st.sidebar.error(f"‚ùå Error en composici√≥n anual: {str(e)}")
        else:
            ax2.bar(df['Mes'], df['Capital'], label="Capital", color='#4ECDC4')
            ax2.bar(df['Mes'], df['Intereses'], bottom=df['Capital'], 
                   label="Intereses", color='#FFE66D')
            ax2.set_xlabel("Meses")
        
        ax2.set_title("Composici√≥n de Pagos")
        ax2.legend()
        ax2.grid(True)
        
        st.pyplot(fig)

    with tab2:
        st.dataframe(df.style.format({
            "Pago Total": "‚Ç¨{:.2f}",
            "Intereses": "‚Ç¨{:.2f}",
            "Capital": "‚Ç¨{:.2f}",
            "Deuda Restante": "‚Ç¨{:.2f}"
        }), height=400)

# Mensaje final de debug
st.sidebar.markdown("---")

